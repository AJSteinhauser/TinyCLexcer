Terminals which are not used

   FOR


Rules never reduced

   61 FUNCTION_STATEMENT_LIST: RETURN_STATEMENT


State 13 conflicts: 1 shift/reduce
State 29 conflicts: 2 shift/reduce
State 37 conflicts: 2 shift/reduce
State 53 conflicts: 1 reduce/reduce
State 121 conflicts: 2 shift/reduce
State 122 conflicts: 2 shift/reduce
State 131 conflicts: 1 shift/reduce


Grammar

    0 $accept: PROGRAM $end

    1 CONSTANT: FLOAT_VALUE
    2         | STRING
    3         | CHAR_VALUE
    4         | INT_VALUE

    5 PRIMARY_EXPRESSION: CONSTANT
    6                   | IDENTIFIER
    7                   | FUNCTION_CALL
    8                   | OPEN_PAR EXPRESSION CLOSE_PAR

    9 FUNCTION_ARG_LIST: POINTER IDENTIFIER
   10                  | EXPRESSION
   11                  | EXPRESSION COMMA FUNCTION_ARG_LIST

   12 FUNCTION_CALL: IDENTIFIER OPEN_PAR FUNCTION_ARG_LIST CLOSE_PAR
   13              | IDENTIFIER OPEN_PAR CLOSE_PAR

   14 UNARY_EXPRESSION: PRIMARY_EXPRESSION
   15                 | PLUS UNARY_EXPRESSION
   16                 | MINUS UNARY_EXPRESSION

   17 MULTIPLICATIVE_EXPRESSION: UNARY_EXPRESSION
   18                          | MULTIPLICATIVE_EXPRESSION MULTIPLY UNARY_EXPRESSION
   19                          | MULTIPLICATIVE_EXPRESSION DIVIDE UNARY_EXPRESSION

   20 ADDITIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION
   21                    | ADDITIVE_EXPRESSION PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION MINUS ADDITIVE_EXPRESSION

   23 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION
   24                      | ADDITIVE_EXPRESSION LEFT_TRI ADDITIVE_EXPRESSION
   25                      | ADDITIVE_EXPRESSION LESS_THAN_EQUALS ADDITIVE_EXPRESSION
   26                      | ADDITIVE_EXPRESSION RIGHT_TRI ADDITIVE_EXPRESSION
   27                      | ADDITIVE_EXPRESSION GREATER_THAN_EQUALS ADDITIVE_EXPRESSION

   28 EXPRESSION: COMPARISON_EXPRESSION
   29           | COMPARISON_EXPRESSION EQUALS COMPARISON_EXPRESSION
   30           | COMPARISON_EXPRESSION NOT_EQUALS COMPARISON_EXPRESSION

   31 ASSIGNMENT_STATEMENT: IDENTIFIER ASSIGNMENT EXPRESSION SEMI_COLON
   32                     | TYPE IDENTIFIER ASSIGNMENT EXPRESSION SEMI_COLON

   33 IF_STATEMENT: IF OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT
   34             | IF OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT ELSE STATEMENT

   35 WHILE_STATMENT: WHILE OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT

   36 RETURN_STATEMENT: RETURN SEMI_COLON
   37                 | RETURN EXPRESSION SEMI_COLON

   38 STATEMENT_LIST: /* empty */
   39               | STATEMENT STATEMENT_LIST

   40 BLOCK_STATEMENT: OPEN_BRACKET STATEMENT_LIST CLOSE_BRACKET

   41 EMPTY_STATEMENT: SEMI_COLON

   42 STATEMENT: ASSIGNMENT_STATEMENT
   43          | IF_STATEMENT
   44          | WHILE_STATMENT
   45          | RETURN_STATEMENT
   46          | BLOCK_STATEMENT
   47          | EMPTY_STATEMENT
   48          | FUNCTION_CALL

   49 RETURN_TYPE: VOID
   50            | TYPE

   51 FUNCTION_PARAMETER: TYPE IDENTIFIER

   52 FUNCTION_PARAMETER_LIST: /* empty */
   53                        | FUNCTION_PARAMETER
   54                        | FUNCTION_PARAMETER COMMA FUNCTION_PARAMETER_LIST

   55 VARIABLE_DEFINITION: TYPE IDENTIFIER ASSIGNMENT CONSTANT SEMI_COLON
   56                    | TYPE IDENTIFIER ASSIGNMENT IDENTIFIER
   57                    | FUNCTION_CALL

   58 VARIABLE_DEFINITION_LIST: /* empty */
   59                         | VARIABLE_DEFINITION VARIABLE_DEFINITION_LIST

   60 FUNCTION_STATEMENT_LIST: /* empty */
   61                        | RETURN_STATEMENT
   62                        | STATEMENT FUNCTION_STATEMENT_LIST

   63 FUNCTION_BODY: OPEN_BRACKET VARIABLE_DEFINITION_LIST FUNCTION_STATEMENT_LIST CLOSE_BRACKET

   64 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR FUNCTION_PARAMETER_LIST CLOSE_PAR FUNCTION_BODY
   65                    | RETURN_TYPE IDENTIFIER OPEN_PAR VOID CLOSE_PAR FUNCTION_BODY

   66 FUNCTION_DEFINITION_LIST: /* empty */
   67                         | FUNCTION_DEFINITION FUNCTION_DEFINITION_LIST

   68 HEADER: HASHTAG INCLUDE LEFT_TRI IDENTIFIER PERIOD IDENTIFIER RIGHT_TRI
   69       | HASHTAG INCLUDE STRING
   70       | HEADER HEADER

   71 PROGRAM: FUNCTION_DEFINITION_LIST
   72        | HEADER FUNCTION_DEFINITION_LIST


Terminals, with rules where they appear

$end (0) 0
error (256)
EQUALS (258) 29
LESS_THAN_EQUALS (259) 25
GREATER_THAN_EQUALS (260) 27
NOT_EQUALS (261) 30
COMMA (262) 11 54
ASSIGNMENT (263) 31 32 55 56
SEMI_COLON (264) 31 32 36 37 41 55
PERIOD (265) 68
POINTER (266) 9
OPEN_BRACKET (267) 40 63
CLOSE_BRACKET (268) 40 63
OPEN_PAR (269) 8 12 13 33 34 35 64 65
CLOSE_PAR (270) 8 12 13 33 34 35 64 65
LEFT_TRI (271) 24 68
RIGHT_TRI (272) 26 68
HASHTAG (273) 68 69
INCLUDE (274) 68 69
RETURN (275) 36 37
VOID (276) 49 65
IF (277) 33 34
ELSE (278) 34
FOR (279)
WHILE (280) 35
PLUS (281) 15 21
MINUS (282) 16 22
MULTIPLY (283) 18
DIVIDE (284) 19
FLOAT_VALUE (285) 1
INT_VALUE (286) 4
CHAR_VALUE (287) 3
IDENTIFIER (288) 6 9 12 13 31 32 51 55 56 64 65 68
TYPE (289) 32 50 51 55 56
STRING (290) 2 69


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
CONSTANT (37)
    on left: 1 2 3 4, on right: 5 55
PRIMARY_EXPRESSION (38)
    on left: 5 6 7 8, on right: 14
FUNCTION_ARG_LIST (39)
    on left: 9 10 11, on right: 11 12
FUNCTION_CALL (40)
    on left: 12 13, on right: 7 48 57
UNARY_EXPRESSION (41)
    on left: 14 15 16, on right: 15 16 17 18 19
MULTIPLICATIVE_EXPRESSION (42)
    on left: 17 18 19, on right: 18 19 20
ADDITIVE_EXPRESSION (43)
    on left: 20 21 22, on right: 21 22 23 24 25 26 27
COMPARISON_EXPRESSION (44)
    on left: 23 24 25 26 27, on right: 28 29 30
EXPRESSION (45)
    on left: 28 29 30, on right: 8 10 11 31 32 33 34 35 37
ASSIGNMENT_STATEMENT (46)
    on left: 31 32, on right: 42
IF_STATEMENT (47)
    on left: 33 34, on right: 43
WHILE_STATMENT (48)
    on left: 35, on right: 44
RETURN_STATEMENT (49)
    on left: 36 37, on right: 45 61
STATEMENT_LIST (50)
    on left: 38 39, on right: 39 40
BLOCK_STATEMENT (51)
    on left: 40, on right: 46
EMPTY_STATEMENT (52)
    on left: 41, on right: 47
STATEMENT (53)
    on left: 42 43 44 45 46 47 48, on right: 33 34 35 39 62
RETURN_TYPE (54)
    on left: 49 50, on right: 64 65
FUNCTION_PARAMETER (55)
    on left: 51, on right: 53 54
FUNCTION_PARAMETER_LIST (56)
    on left: 52 53 54, on right: 54 64
VARIABLE_DEFINITION (57)
    on left: 55 56 57, on right: 59
VARIABLE_DEFINITION_LIST (58)
    on left: 58 59, on right: 59 63
FUNCTION_STATEMENT_LIST (59)
    on left: 60 61 62, on right: 62 63
FUNCTION_BODY (60)
    on left: 63, on right: 64 65
FUNCTION_DEFINITION (61)
    on left: 64 65, on right: 67
FUNCTION_DEFINITION_LIST (62)
    on left: 66 67, on right: 67 71 72
HEADER (63)
    on left: 68 69 70, on right: 70 72
PROGRAM (64)
    on left: 71 72, on right: 0


state 0

    0 $accept: . PROGRAM $end

    HASHTAG  shift, and go to state 1
    VOID     shift, and go to state 2
    TYPE     shift, and go to state 3

    $default  reduce using rule 66 (FUNCTION_DEFINITION_LIST)

    RETURN_TYPE               go to state 4
    FUNCTION_DEFINITION       go to state 5
    FUNCTION_DEFINITION_LIST  go to state 6
    HEADER                    go to state 7
    PROGRAM                   go to state 8


state 1

   68 HEADER: HASHTAG . INCLUDE LEFT_TRI IDENTIFIER PERIOD IDENTIFIER RIGHT_TRI
   69       | HASHTAG . INCLUDE STRING

    INCLUDE  shift, and go to state 9


state 2

   49 RETURN_TYPE: VOID .

    $default  reduce using rule 49 (RETURN_TYPE)


state 3

   50 RETURN_TYPE: TYPE .

    $default  reduce using rule 50 (RETURN_TYPE)


state 4

   64 FUNCTION_DEFINITION: RETURN_TYPE . IDENTIFIER OPEN_PAR FUNCTION_PARAMETER_LIST CLOSE_PAR FUNCTION_BODY
   65                    | RETURN_TYPE . IDENTIFIER OPEN_PAR VOID CLOSE_PAR FUNCTION_BODY

    IDENTIFIER  shift, and go to state 10


state 5

   67 FUNCTION_DEFINITION_LIST: FUNCTION_DEFINITION . FUNCTION_DEFINITION_LIST

    VOID  shift, and go to state 2
    TYPE  shift, and go to state 3

    $default  reduce using rule 66 (FUNCTION_DEFINITION_LIST)

    RETURN_TYPE               go to state 4
    FUNCTION_DEFINITION       go to state 5
    FUNCTION_DEFINITION_LIST  go to state 11


state 6

   71 PROGRAM: FUNCTION_DEFINITION_LIST .

    $default  reduce using rule 71 (PROGRAM)


state 7

   70 HEADER: HEADER . HEADER
   72 PROGRAM: HEADER . FUNCTION_DEFINITION_LIST

    HASHTAG  shift, and go to state 1
    VOID     shift, and go to state 2
    TYPE     shift, and go to state 3

    $default  reduce using rule 66 (FUNCTION_DEFINITION_LIST)

    RETURN_TYPE               go to state 4
    FUNCTION_DEFINITION       go to state 5
    FUNCTION_DEFINITION_LIST  go to state 12
    HEADER                    go to state 13


state 8

    0 $accept: PROGRAM . $end

    $end  shift, and go to state 14


state 9

   68 HEADER: HASHTAG INCLUDE . LEFT_TRI IDENTIFIER PERIOD IDENTIFIER RIGHT_TRI
   69       | HASHTAG INCLUDE . STRING

    LEFT_TRI  shift, and go to state 15
    STRING    shift, and go to state 16


state 10

   64 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER . OPEN_PAR FUNCTION_PARAMETER_LIST CLOSE_PAR FUNCTION_BODY
   65                    | RETURN_TYPE IDENTIFIER . OPEN_PAR VOID CLOSE_PAR FUNCTION_BODY

    OPEN_PAR  shift, and go to state 17


state 11

   67 FUNCTION_DEFINITION_LIST: FUNCTION_DEFINITION FUNCTION_DEFINITION_LIST .

    $default  reduce using rule 67 (FUNCTION_DEFINITION_LIST)


state 12

   72 PROGRAM: HEADER FUNCTION_DEFINITION_LIST .

    $default  reduce using rule 72 (PROGRAM)


state 13

   70 HEADER: HEADER . HEADER
   70       | HEADER HEADER .

    HASHTAG  shift, and go to state 1

    HASHTAG   [reduce using rule 70 (HEADER)]
    $default  reduce using rule 70 (HEADER)

    HEADER  go to state 13


state 14

    0 $accept: PROGRAM $end .

    $default  accept


state 15

   68 HEADER: HASHTAG INCLUDE LEFT_TRI . IDENTIFIER PERIOD IDENTIFIER RIGHT_TRI

    IDENTIFIER  shift, and go to state 18


state 16

   69 HEADER: HASHTAG INCLUDE STRING .

    $default  reduce using rule 69 (HEADER)


state 17

   64 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR . FUNCTION_PARAMETER_LIST CLOSE_PAR FUNCTION_BODY
   65                    | RETURN_TYPE IDENTIFIER OPEN_PAR . VOID CLOSE_PAR FUNCTION_BODY

    VOID  shift, and go to state 19
    TYPE  shift, and go to state 20

    $default  reduce using rule 52 (FUNCTION_PARAMETER_LIST)

    FUNCTION_PARAMETER       go to state 21
    FUNCTION_PARAMETER_LIST  go to state 22


state 18

   68 HEADER: HASHTAG INCLUDE LEFT_TRI IDENTIFIER . PERIOD IDENTIFIER RIGHT_TRI

    PERIOD  shift, and go to state 23


state 19

   65 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR VOID . CLOSE_PAR FUNCTION_BODY

    CLOSE_PAR  shift, and go to state 24


state 20

   51 FUNCTION_PARAMETER: TYPE . IDENTIFIER

    IDENTIFIER  shift, and go to state 25


state 21

   53 FUNCTION_PARAMETER_LIST: FUNCTION_PARAMETER .
   54                        | FUNCTION_PARAMETER . COMMA FUNCTION_PARAMETER_LIST

    COMMA  shift, and go to state 26

    $default  reduce using rule 53 (FUNCTION_PARAMETER_LIST)


state 22

   64 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR FUNCTION_PARAMETER_LIST . CLOSE_PAR FUNCTION_BODY

    CLOSE_PAR  shift, and go to state 27


state 23

   68 HEADER: HASHTAG INCLUDE LEFT_TRI IDENTIFIER PERIOD . IDENTIFIER RIGHT_TRI

    IDENTIFIER  shift, and go to state 28


state 24

   65 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR VOID CLOSE_PAR . FUNCTION_BODY

    OPEN_BRACKET  shift, and go to state 29

    FUNCTION_BODY  go to state 30


state 25

   51 FUNCTION_PARAMETER: TYPE IDENTIFIER .

    $default  reduce using rule 51 (FUNCTION_PARAMETER)


state 26

   54 FUNCTION_PARAMETER_LIST: FUNCTION_PARAMETER COMMA . FUNCTION_PARAMETER_LIST

    TYPE  shift, and go to state 20

    $default  reduce using rule 52 (FUNCTION_PARAMETER_LIST)

    FUNCTION_PARAMETER       go to state 21
    FUNCTION_PARAMETER_LIST  go to state 31


state 27

   64 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR FUNCTION_PARAMETER_LIST CLOSE_PAR . FUNCTION_BODY

    OPEN_BRACKET  shift, and go to state 29

    FUNCTION_BODY  go to state 32


state 28

   68 HEADER: HASHTAG INCLUDE LEFT_TRI IDENTIFIER PERIOD IDENTIFIER . RIGHT_TRI

    RIGHT_TRI  shift, and go to state 33


state 29

   63 FUNCTION_BODY: OPEN_BRACKET . VARIABLE_DEFINITION_LIST FUNCTION_STATEMENT_LIST CLOSE_BRACKET

    IDENTIFIER  shift, and go to state 34
    TYPE        shift, and go to state 35

    IDENTIFIER  [reduce using rule 58 (VARIABLE_DEFINITION_LIST)]
    TYPE        [reduce using rule 58 (VARIABLE_DEFINITION_LIST)]
    $default    reduce using rule 58 (VARIABLE_DEFINITION_LIST)

    FUNCTION_CALL             go to state 36
    VARIABLE_DEFINITION       go to state 37
    VARIABLE_DEFINITION_LIST  go to state 38


state 30

   65 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR VOID CLOSE_PAR FUNCTION_BODY .

    $default  reduce using rule 65 (FUNCTION_DEFINITION)


state 31

   54 FUNCTION_PARAMETER_LIST: FUNCTION_PARAMETER COMMA FUNCTION_PARAMETER_LIST .

    $default  reduce using rule 54 (FUNCTION_PARAMETER_LIST)


state 32

   64 FUNCTION_DEFINITION: RETURN_TYPE IDENTIFIER OPEN_PAR FUNCTION_PARAMETER_LIST CLOSE_PAR FUNCTION_BODY .

    $default  reduce using rule 64 (FUNCTION_DEFINITION)


state 33

   68 HEADER: HASHTAG INCLUDE LEFT_TRI IDENTIFIER PERIOD IDENTIFIER RIGHT_TRI .

    $default  reduce using rule 68 (HEADER)


state 34

   12 FUNCTION_CALL: IDENTIFIER . OPEN_PAR FUNCTION_ARG_LIST CLOSE_PAR
   13              | IDENTIFIER . OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 39


state 35

   55 VARIABLE_DEFINITION: TYPE . IDENTIFIER ASSIGNMENT CONSTANT SEMI_COLON
   56                    | TYPE . IDENTIFIER ASSIGNMENT IDENTIFIER

    IDENTIFIER  shift, and go to state 40


state 36

   57 VARIABLE_DEFINITION: FUNCTION_CALL .

    $default  reduce using rule 57 (VARIABLE_DEFINITION)


state 37

   59 VARIABLE_DEFINITION_LIST: VARIABLE_DEFINITION . VARIABLE_DEFINITION_LIST

    IDENTIFIER  shift, and go to state 34
    TYPE        shift, and go to state 35

    IDENTIFIER  [reduce using rule 58 (VARIABLE_DEFINITION_LIST)]
    TYPE        [reduce using rule 58 (VARIABLE_DEFINITION_LIST)]
    $default    reduce using rule 58 (VARIABLE_DEFINITION_LIST)

    FUNCTION_CALL             go to state 36
    VARIABLE_DEFINITION       go to state 37
    VARIABLE_DEFINITION_LIST  go to state 41


state 38

   63 FUNCTION_BODY: OPEN_BRACKET VARIABLE_DEFINITION_LIST . FUNCTION_STATEMENT_LIST CLOSE_BRACKET

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    $default  reduce using rule 60 (FUNCTION_STATEMENT_LIST)

    FUNCTION_CALL            go to state 49
    ASSIGNMENT_STATEMENT     go to state 50
    IF_STATEMENT             go to state 51
    WHILE_STATMENT           go to state 52
    RETURN_STATEMENT         go to state 53
    BLOCK_STATEMENT          go to state 54
    EMPTY_STATEMENT          go to state 55
    STATEMENT                go to state 56
    FUNCTION_STATEMENT_LIST  go to state 57


state 39

   12 FUNCTION_CALL: IDENTIFIER OPEN_PAR . FUNCTION_ARG_LIST CLOSE_PAR
   13              | IDENTIFIER OPEN_PAR . CLOSE_PAR

    POINTER      shift, and go to state 58
    OPEN_PAR     shift, and go to state 59
    CLOSE_PAR    shift, and go to state 60
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_ARG_LIST          go to state 70
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 76


state 40

   55 VARIABLE_DEFINITION: TYPE IDENTIFIER . ASSIGNMENT CONSTANT SEMI_COLON
   56                    | TYPE IDENTIFIER . ASSIGNMENT IDENTIFIER

    ASSIGNMENT  shift, and go to state 77


state 41

   59 VARIABLE_DEFINITION_LIST: VARIABLE_DEFINITION VARIABLE_DEFINITION_LIST .

    $default  reduce using rule 59 (VARIABLE_DEFINITION_LIST)


state 42

   41 EMPTY_STATEMENT: SEMI_COLON .

    $default  reduce using rule 41 (EMPTY_STATEMENT)


state 43

   40 BLOCK_STATEMENT: OPEN_BRACKET . STATEMENT_LIST CLOSE_BRACKET

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    $default  reduce using rule 38 (STATEMENT_LIST)

    FUNCTION_CALL         go to state 49
    ASSIGNMENT_STATEMENT  go to state 50
    IF_STATEMENT          go to state 51
    WHILE_STATMENT        go to state 52
    RETURN_STATEMENT      go to state 78
    STATEMENT_LIST        go to state 79
    BLOCK_STATEMENT       go to state 54
    EMPTY_STATEMENT       go to state 55
    STATEMENT             go to state 80


state 44

   36 RETURN_STATEMENT: RETURN . SEMI_COLON
   37                 | RETURN . EXPRESSION SEMI_COLON

    SEMI_COLON   shift, and go to state 81
    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 82


state 45

   33 IF_STATEMENT: IF . OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT
   34             | IF . OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT ELSE STATEMENT

    OPEN_PAR  shift, and go to state 83


state 46

   35 WHILE_STATMENT: WHILE . OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT

    OPEN_PAR  shift, and go to state 84


state 47

   12 FUNCTION_CALL: IDENTIFIER . OPEN_PAR FUNCTION_ARG_LIST CLOSE_PAR
   13              | IDENTIFIER . OPEN_PAR CLOSE_PAR
   31 ASSIGNMENT_STATEMENT: IDENTIFIER . ASSIGNMENT EXPRESSION SEMI_COLON

    ASSIGNMENT  shift, and go to state 85
    OPEN_PAR    shift, and go to state 39


state 48

   32 ASSIGNMENT_STATEMENT: TYPE . IDENTIFIER ASSIGNMENT EXPRESSION SEMI_COLON

    IDENTIFIER  shift, and go to state 86


state 49

   48 STATEMENT: FUNCTION_CALL .

    $default  reduce using rule 48 (STATEMENT)


state 50

   42 STATEMENT: ASSIGNMENT_STATEMENT .

    $default  reduce using rule 42 (STATEMENT)


state 51

   43 STATEMENT: IF_STATEMENT .

    $default  reduce using rule 43 (STATEMENT)


state 52

   44 STATEMENT: WHILE_STATMENT .

    $default  reduce using rule 44 (STATEMENT)


state 53

   45 STATEMENT: RETURN_STATEMENT .
   61 FUNCTION_STATEMENT_LIST: RETURN_STATEMENT .

    CLOSE_BRACKET  reduce using rule 45 (STATEMENT)
    CLOSE_BRACKET  [reduce using rule 61 (FUNCTION_STATEMENT_LIST)]
    $default       reduce using rule 45 (STATEMENT)


state 54

   46 STATEMENT: BLOCK_STATEMENT .

    $default  reduce using rule 46 (STATEMENT)


state 55

   47 STATEMENT: EMPTY_STATEMENT .

    $default  reduce using rule 47 (STATEMENT)


state 56

   62 FUNCTION_STATEMENT_LIST: STATEMENT . FUNCTION_STATEMENT_LIST

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    $default  reduce using rule 60 (FUNCTION_STATEMENT_LIST)

    FUNCTION_CALL            go to state 49
    ASSIGNMENT_STATEMENT     go to state 50
    IF_STATEMENT             go to state 51
    WHILE_STATMENT           go to state 52
    RETURN_STATEMENT         go to state 53
    BLOCK_STATEMENT          go to state 54
    EMPTY_STATEMENT          go to state 55
    STATEMENT                go to state 56
    FUNCTION_STATEMENT_LIST  go to state 87


state 57

   63 FUNCTION_BODY: OPEN_BRACKET VARIABLE_DEFINITION_LIST FUNCTION_STATEMENT_LIST . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 88


state 58

    9 FUNCTION_ARG_LIST: POINTER . IDENTIFIER

    IDENTIFIER  shift, and go to state 89


state 59

    8 PRIMARY_EXPRESSION: OPEN_PAR . EXPRESSION CLOSE_PAR

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 90


state 60

   13 FUNCTION_CALL: IDENTIFIER OPEN_PAR CLOSE_PAR .

    $default  reduce using rule 13 (FUNCTION_CALL)


state 61

   15 UNARY_EXPRESSION: PLUS . UNARY_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT            go to state 68
    PRIMARY_EXPRESSION  go to state 69
    FUNCTION_CALL       go to state 71
    UNARY_EXPRESSION    go to state 91


state 62

   16 UNARY_EXPRESSION: MINUS . UNARY_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT            go to state 68
    PRIMARY_EXPRESSION  go to state 69
    FUNCTION_CALL       go to state 71
    UNARY_EXPRESSION    go to state 92


state 63

    1 CONSTANT: FLOAT_VALUE .

    $default  reduce using rule 1 (CONSTANT)


state 64

    4 CONSTANT: INT_VALUE .

    $default  reduce using rule 4 (CONSTANT)


state 65

    3 CONSTANT: CHAR_VALUE .

    $default  reduce using rule 3 (CONSTANT)


state 66

    6 PRIMARY_EXPRESSION: IDENTIFIER .
   12 FUNCTION_CALL: IDENTIFIER . OPEN_PAR FUNCTION_ARG_LIST CLOSE_PAR
   13              | IDENTIFIER . OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 39

    $default  reduce using rule 6 (PRIMARY_EXPRESSION)


state 67

    2 CONSTANT: STRING .

    $default  reduce using rule 2 (CONSTANT)


state 68

    5 PRIMARY_EXPRESSION: CONSTANT .

    $default  reduce using rule 5 (PRIMARY_EXPRESSION)


state 69

   14 UNARY_EXPRESSION: PRIMARY_EXPRESSION .

    $default  reduce using rule 14 (UNARY_EXPRESSION)


state 70

   12 FUNCTION_CALL: IDENTIFIER OPEN_PAR FUNCTION_ARG_LIST . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 93


state 71

    7 PRIMARY_EXPRESSION: FUNCTION_CALL .

    $default  reduce using rule 7 (PRIMARY_EXPRESSION)


state 72

   17 MULTIPLICATIVE_EXPRESSION: UNARY_EXPRESSION .

    $default  reduce using rule 17 (MULTIPLICATIVE_EXPRESSION)


state 73

   18 MULTIPLICATIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION . MULTIPLY UNARY_EXPRESSION
   19                          | MULTIPLICATIVE_EXPRESSION . DIVIDE UNARY_EXPRESSION
   20 ADDITIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION .

    MULTIPLY  shift, and go to state 94
    DIVIDE    shift, and go to state 95

    $default  reduce using rule 20 (ADDITIVE_EXPRESSION)


state 74

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION
   23 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION .
   24                      | ADDITIVE_EXPRESSION . LEFT_TRI ADDITIVE_EXPRESSION
   25                      | ADDITIVE_EXPRESSION . LESS_THAN_EQUALS ADDITIVE_EXPRESSION
   26                      | ADDITIVE_EXPRESSION . RIGHT_TRI ADDITIVE_EXPRESSION
   27                      | ADDITIVE_EXPRESSION . GREATER_THAN_EQUALS ADDITIVE_EXPRESSION

    LESS_THAN_EQUALS     shift, and go to state 96
    GREATER_THAN_EQUALS  shift, and go to state 97
    LEFT_TRI             shift, and go to state 98
    RIGHT_TRI            shift, and go to state 99
    PLUS                 shift, and go to state 100
    MINUS                shift, and go to state 101

    $default  reduce using rule 23 (COMPARISON_EXPRESSION)


state 75

   28 EXPRESSION: COMPARISON_EXPRESSION .
   29           | COMPARISON_EXPRESSION . EQUALS COMPARISON_EXPRESSION
   30           | COMPARISON_EXPRESSION . NOT_EQUALS COMPARISON_EXPRESSION

    EQUALS      shift, and go to state 102
    NOT_EQUALS  shift, and go to state 103

    $default  reduce using rule 28 (EXPRESSION)


state 76

   10 FUNCTION_ARG_LIST: EXPRESSION .
   11                  | EXPRESSION . COMMA FUNCTION_ARG_LIST

    COMMA  shift, and go to state 104

    $default  reduce using rule 10 (FUNCTION_ARG_LIST)


state 77

   55 VARIABLE_DEFINITION: TYPE IDENTIFIER ASSIGNMENT . CONSTANT SEMI_COLON
   56                    | TYPE IDENTIFIER ASSIGNMENT . IDENTIFIER

    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 105
    STRING       shift, and go to state 67

    CONSTANT  go to state 106


state 78

   45 STATEMENT: RETURN_STATEMENT .

    $default  reduce using rule 45 (STATEMENT)


state 79

   40 BLOCK_STATEMENT: OPEN_BRACKET STATEMENT_LIST . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 107


state 80

   39 STATEMENT_LIST: STATEMENT . STATEMENT_LIST

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    $default  reduce using rule 38 (STATEMENT_LIST)

    FUNCTION_CALL         go to state 49
    ASSIGNMENT_STATEMENT  go to state 50
    IF_STATEMENT          go to state 51
    WHILE_STATMENT        go to state 52
    RETURN_STATEMENT      go to state 78
    STATEMENT_LIST        go to state 108
    BLOCK_STATEMENT       go to state 54
    EMPTY_STATEMENT       go to state 55
    STATEMENT             go to state 80


state 81

   36 RETURN_STATEMENT: RETURN SEMI_COLON .

    $default  reduce using rule 36 (RETURN_STATEMENT)


state 82

   37 RETURN_STATEMENT: RETURN EXPRESSION . SEMI_COLON

    SEMI_COLON  shift, and go to state 109


state 83

   33 IF_STATEMENT: IF OPEN_PAR . EXPRESSION CLOSE_PAR STATEMENT
   34             | IF OPEN_PAR . EXPRESSION CLOSE_PAR STATEMENT ELSE STATEMENT

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 110


state 84

   35 WHILE_STATMENT: WHILE OPEN_PAR . EXPRESSION CLOSE_PAR STATEMENT

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 111


state 85

   31 ASSIGNMENT_STATEMENT: IDENTIFIER ASSIGNMENT . EXPRESSION SEMI_COLON

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 112


state 86

   32 ASSIGNMENT_STATEMENT: TYPE IDENTIFIER . ASSIGNMENT EXPRESSION SEMI_COLON

    ASSIGNMENT  shift, and go to state 113


state 87

   62 FUNCTION_STATEMENT_LIST: STATEMENT FUNCTION_STATEMENT_LIST .

    $default  reduce using rule 62 (FUNCTION_STATEMENT_LIST)


state 88

   63 FUNCTION_BODY: OPEN_BRACKET VARIABLE_DEFINITION_LIST FUNCTION_STATEMENT_LIST CLOSE_BRACKET .

    $default  reduce using rule 63 (FUNCTION_BODY)


state 89

    9 FUNCTION_ARG_LIST: POINTER IDENTIFIER .

    $default  reduce using rule 9 (FUNCTION_ARG_LIST)


state 90

    8 PRIMARY_EXPRESSION: OPEN_PAR EXPRESSION . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 114


state 91

   15 UNARY_EXPRESSION: PLUS UNARY_EXPRESSION .

    $default  reduce using rule 15 (UNARY_EXPRESSION)


state 92

   16 UNARY_EXPRESSION: MINUS UNARY_EXPRESSION .

    $default  reduce using rule 16 (UNARY_EXPRESSION)


state 93

   12 FUNCTION_CALL: IDENTIFIER OPEN_PAR FUNCTION_ARG_LIST CLOSE_PAR .

    $default  reduce using rule 12 (FUNCTION_CALL)


state 94

   18 MULTIPLICATIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION MULTIPLY . UNARY_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT            go to state 68
    PRIMARY_EXPRESSION  go to state 69
    FUNCTION_CALL       go to state 71
    UNARY_EXPRESSION    go to state 115


state 95

   19 MULTIPLICATIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION DIVIDE . UNARY_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT            go to state 68
    PRIMARY_EXPRESSION  go to state 69
    FUNCTION_CALL       go to state 71
    UNARY_EXPRESSION    go to state 116


state 96

   25 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION LESS_THAN_EQUALS . ADDITIVE_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 117


state 97

   27 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION GREATER_THAN_EQUALS . ADDITIVE_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 118


state 98

   24 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION LEFT_TRI . ADDITIVE_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 119


state 99

   26 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION RIGHT_TRI . ADDITIVE_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 120


state 100

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION PLUS . ADDITIVE_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 121


state 101

   22 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION MINUS . ADDITIVE_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 122


state 102

   29 EXPRESSION: COMPARISON_EXPRESSION EQUALS . COMPARISON_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 123


state 103

   30 EXPRESSION: COMPARISON_EXPRESSION NOT_EQUALS . COMPARISON_EXPRESSION

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 124


state 104

   11 FUNCTION_ARG_LIST: EXPRESSION COMMA . FUNCTION_ARG_LIST

    POINTER      shift, and go to state 58
    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_ARG_LIST          go to state 125
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 76


state 105

   56 VARIABLE_DEFINITION: TYPE IDENTIFIER ASSIGNMENT IDENTIFIER .

    $default  reduce using rule 56 (VARIABLE_DEFINITION)


state 106

   55 VARIABLE_DEFINITION: TYPE IDENTIFIER ASSIGNMENT CONSTANT . SEMI_COLON

    SEMI_COLON  shift, and go to state 126


state 107

   40 BLOCK_STATEMENT: OPEN_BRACKET STATEMENT_LIST CLOSE_BRACKET .

    $default  reduce using rule 40 (BLOCK_STATEMENT)


state 108

   39 STATEMENT_LIST: STATEMENT STATEMENT_LIST .

    $default  reduce using rule 39 (STATEMENT_LIST)


state 109

   37 RETURN_STATEMENT: RETURN EXPRESSION SEMI_COLON .

    $default  reduce using rule 37 (RETURN_STATEMENT)


state 110

   33 IF_STATEMENT: IF OPEN_PAR EXPRESSION . CLOSE_PAR STATEMENT
   34             | IF OPEN_PAR EXPRESSION . CLOSE_PAR STATEMENT ELSE STATEMENT

    CLOSE_PAR  shift, and go to state 127


state 111

   35 WHILE_STATMENT: WHILE OPEN_PAR EXPRESSION . CLOSE_PAR STATEMENT

    CLOSE_PAR  shift, and go to state 128


state 112

   31 ASSIGNMENT_STATEMENT: IDENTIFIER ASSIGNMENT EXPRESSION . SEMI_COLON

    SEMI_COLON  shift, and go to state 129


state 113

   32 ASSIGNMENT_STATEMENT: TYPE IDENTIFIER ASSIGNMENT . EXPRESSION SEMI_COLON

    OPEN_PAR     shift, and go to state 59
    PLUS         shift, and go to state 61
    MINUS        shift, and go to state 62
    FLOAT_VALUE  shift, and go to state 63
    INT_VALUE    shift, and go to state 64
    CHAR_VALUE   shift, and go to state 65
    IDENTIFIER   shift, and go to state 66
    STRING       shift, and go to state 67

    CONSTANT                   go to state 68
    PRIMARY_EXPRESSION         go to state 69
    FUNCTION_CALL              go to state 71
    UNARY_EXPRESSION           go to state 72
    MULTIPLICATIVE_EXPRESSION  go to state 73
    ADDITIVE_EXPRESSION        go to state 74
    COMPARISON_EXPRESSION      go to state 75
    EXPRESSION                 go to state 130


state 114

    8 PRIMARY_EXPRESSION: OPEN_PAR EXPRESSION CLOSE_PAR .

    $default  reduce using rule 8 (PRIMARY_EXPRESSION)


state 115

   18 MULTIPLICATIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION MULTIPLY UNARY_EXPRESSION .

    $default  reduce using rule 18 (MULTIPLICATIVE_EXPRESSION)


state 116

   19 MULTIPLICATIVE_EXPRESSION: MULTIPLICATIVE_EXPRESSION DIVIDE UNARY_EXPRESSION .

    $default  reduce using rule 19 (MULTIPLICATIVE_EXPRESSION)


state 117

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION
   25 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION LESS_THAN_EQUALS ADDITIVE_EXPRESSION .

    PLUS   shift, and go to state 100
    MINUS  shift, and go to state 101

    $default  reduce using rule 25 (COMPARISON_EXPRESSION)


state 118

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION
   27 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION GREATER_THAN_EQUALS ADDITIVE_EXPRESSION .

    PLUS   shift, and go to state 100
    MINUS  shift, and go to state 101

    $default  reduce using rule 27 (COMPARISON_EXPRESSION)


state 119

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION
   24 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION LEFT_TRI ADDITIVE_EXPRESSION .

    PLUS   shift, and go to state 100
    MINUS  shift, and go to state 101

    $default  reduce using rule 24 (COMPARISON_EXPRESSION)


state 120

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION
   26 COMPARISON_EXPRESSION: ADDITIVE_EXPRESSION RIGHT_TRI ADDITIVE_EXPRESSION .

    PLUS   shift, and go to state 100
    MINUS  shift, and go to state 101

    $default  reduce using rule 26 (COMPARISON_EXPRESSION)


state 121

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   21                    | ADDITIVE_EXPRESSION PLUS ADDITIVE_EXPRESSION .
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION

    PLUS   shift, and go to state 100
    MINUS  shift, and go to state 101

    PLUS      [reduce using rule 21 (ADDITIVE_EXPRESSION)]
    MINUS     [reduce using rule 21 (ADDITIVE_EXPRESSION)]
    $default  reduce using rule 21 (ADDITIVE_EXPRESSION)


state 122

   21 ADDITIVE_EXPRESSION: ADDITIVE_EXPRESSION . PLUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION . MINUS ADDITIVE_EXPRESSION
   22                    | ADDITIVE_EXPRESSION MINUS ADDITIVE_EXPRESSION .

    PLUS   shift, and go to state 100
    MINUS  shift, and go to state 101

    PLUS      [reduce using rule 22 (ADDITIVE_EXPRESSION)]
    MINUS     [reduce using rule 22 (ADDITIVE_EXPRESSION)]
    $default  reduce using rule 22 (ADDITIVE_EXPRESSION)


state 123

   29 EXPRESSION: COMPARISON_EXPRESSION EQUALS COMPARISON_EXPRESSION .

    $default  reduce using rule 29 (EXPRESSION)


state 124

   30 EXPRESSION: COMPARISON_EXPRESSION NOT_EQUALS COMPARISON_EXPRESSION .

    $default  reduce using rule 30 (EXPRESSION)


state 125

   11 FUNCTION_ARG_LIST: EXPRESSION COMMA FUNCTION_ARG_LIST .

    $default  reduce using rule 11 (FUNCTION_ARG_LIST)


state 126

   55 VARIABLE_DEFINITION: TYPE IDENTIFIER ASSIGNMENT CONSTANT SEMI_COLON .

    $default  reduce using rule 55 (VARIABLE_DEFINITION)


state 127

   33 IF_STATEMENT: IF OPEN_PAR EXPRESSION CLOSE_PAR . STATEMENT
   34             | IF OPEN_PAR EXPRESSION CLOSE_PAR . STATEMENT ELSE STATEMENT

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    FUNCTION_CALL         go to state 49
    ASSIGNMENT_STATEMENT  go to state 50
    IF_STATEMENT          go to state 51
    WHILE_STATMENT        go to state 52
    RETURN_STATEMENT      go to state 78
    BLOCK_STATEMENT       go to state 54
    EMPTY_STATEMENT       go to state 55
    STATEMENT             go to state 131


state 128

   35 WHILE_STATMENT: WHILE OPEN_PAR EXPRESSION CLOSE_PAR . STATEMENT

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    FUNCTION_CALL         go to state 49
    ASSIGNMENT_STATEMENT  go to state 50
    IF_STATEMENT          go to state 51
    WHILE_STATMENT        go to state 52
    RETURN_STATEMENT      go to state 78
    BLOCK_STATEMENT       go to state 54
    EMPTY_STATEMENT       go to state 55
    STATEMENT             go to state 132


state 129

   31 ASSIGNMENT_STATEMENT: IDENTIFIER ASSIGNMENT EXPRESSION SEMI_COLON .

    $default  reduce using rule 31 (ASSIGNMENT_STATEMENT)


state 130

   32 ASSIGNMENT_STATEMENT: TYPE IDENTIFIER ASSIGNMENT EXPRESSION . SEMI_COLON

    SEMI_COLON  shift, and go to state 133


state 131

   33 IF_STATEMENT: IF OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT .
   34             | IF OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT . ELSE STATEMENT

    ELSE  shift, and go to state 134

    ELSE      [reduce using rule 33 (IF_STATEMENT)]
    $default  reduce using rule 33 (IF_STATEMENT)


state 132

   35 WHILE_STATMENT: WHILE OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT .

    $default  reduce using rule 35 (WHILE_STATMENT)


state 133

   32 ASSIGNMENT_STATEMENT: TYPE IDENTIFIER ASSIGNMENT EXPRESSION SEMI_COLON .

    $default  reduce using rule 32 (ASSIGNMENT_STATEMENT)


state 134

   34 IF_STATEMENT: IF OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT ELSE . STATEMENT

    SEMI_COLON    shift, and go to state 42
    OPEN_BRACKET  shift, and go to state 43
    RETURN        shift, and go to state 44
    IF            shift, and go to state 45
    WHILE         shift, and go to state 46
    IDENTIFIER    shift, and go to state 47
    TYPE          shift, and go to state 48

    FUNCTION_CALL         go to state 49
    ASSIGNMENT_STATEMENT  go to state 50
    IF_STATEMENT          go to state 51
    WHILE_STATMENT        go to state 52
    RETURN_STATEMENT      go to state 78
    BLOCK_STATEMENT       go to state 54
    EMPTY_STATEMENT       go to state 55
    STATEMENT             go to state 135


state 135

   34 IF_STATEMENT: IF OPEN_PAR EXPRESSION CLOSE_PAR STATEMENT ELSE STATEMENT .

    $default  reduce using rule 34 (IF_STATEMENT)
