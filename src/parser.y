
%{
#include <stdio.h>
#include <stdlib.h>

#define YYERROR_VERBOSE 1

void yyerror(char *msg);
extern int yylex();


%}

%union {
    float f;
    int i;
    char ch;
    char* ident;
}

%token EQUALS LESS_THAN_EQUALS GREATER_THAN_EQUALS NOT_EQUALS
%token COMMA ASSIGNMENT SEMI_COLON PERIOD
%token OPEN_BRACKET CLOSE_BRACKET OPEN_PAR CLOSE_PAR
%token LEFT_TRI RIGHT_TRI HASHTAG

%token INCLUDE RETURN

%token IF_STATEMENT ELSE_STATEMENT FOR_STATEMENT

%token <f> FLOAT_VALUE
%token <i> INT_VALUE
%token <ch> CHAR_VALUE
%token <ident> IDENTIFIER TYPE STRING

%start DECLARATION


%%

DECLARATION : EXPRESSION SEMI_COLON
			| DECLARATION EXPRESSION SEMI_COLON
			| FUNCTION_DEC   
			| DECLARATION FUNCTION_DEC 
			| HEADER
			| FUNCTION_CALL
			| RETURN_RULE SEMI_COLON
			| DECLARATION RETURN_RULE SEMI_COLON
			| IF
			| IF ELSE
			| DECLARATION IF
			| DECLARATION IF ELSE 
			| FOR
			| DECLARATION FOR
			;

HEADER : HASHTAG INCLUDE STRING
	   | HASHTAG INCLUDE LEFT_TRI IDENTIFIER PERIOD IDENTIFIER RIGHT_TRI

EXPRESSION : TYPE IDENTIFIER ASSIGNMENT NUMBER
		   | TYPE IDENTIFIER ASSIGNMENT IDENTIFIER
		   | IDENTIFIER ASSIGNMENT IDENTIFIER
		   | IDENTIFIER ASSIGNMENT NUMBER
		   | TYPE IDENTIFIER
		   ;

EVALUATION : 

RETURN_RULE : RETURN 
			| RETURN NUMBER
			| RETURN FUNCTION_CALL
			| RETURN IDENTIFIER
			;

FUNCTION_DEC : EXPRESSION PARAMATER_CONTAINER OPEN_BRACKET DECLARATION CLOSE_BRACKET 
			 | EXPRESSION PARAMATER_CONTAINER SEMI_COLON
			 ;

FUNCTION_CALL : IDENTIFIER OPEN_PAR CALL_LIST CLOSE_PAR SEMI_COLON
	 		  ;

CALL_LIST : CALL_LIST COMMA CALL_LIST
		  | NUMBER
		  ;

PARAMATER_CONTAINER : OPEN_PAR EXPRESSION COMMA EXPRESSION CLOSE_PAR
					| OPEN_PAR CLOSE_PAR
					;

IF : IF_STATEMENT OPEN_PAR COMPARISON CLOSE_PAR OPEN_BRACKET DECLARATION CLOSE_BRACKET
   ;

ELSE : ELSE_STATEMENT OPEN_BRACKET DECLARATION CLOSE_BRACKET
	 ;

FOR : FOR_STATEMENT OPEN_PAR EXPRESSION SEMI_COLON COMPARISON SEMI_COLON EXPRESSION CLOSE_PAR OPEN_BRACKET DECLARATION CLOSE_BRACKET
    ;

COMPARISON : IDENTIFIER COMPARATOR IDENTIFIER
		   | IDENTIFIER COMPARATOR NUMBER
		   | NUMBER COMPARATOR IDENTIFIER
		   ;

COMPARATOR : EQUALS
		   | NOT_EQUALS
		   | GREATER_THAN_EQUALS
		   | LESS_THAN_EQUALS
		   | LEFT_TRI
		   | RIGHT_TRI
		   ;

NUMBER : INT_VALUE
	   | FLOAT_VALUE
	   | CHAR_VALUE
	   | STRING
	   ;


%%

void yyerror(char *msg){
    fprintf(stderr,"%s\n",msg);
    exit(1);
};

int main(void){
	#ifdef YYDEBUG
	  yydebug = 1;
	#endif
    yyparse();
    printf("%s\n", "No Syntax Errors Detected!");
    return 0;
};